#!/usr/bin/env python3
"""
TailorTalk Google OAuth Setup Script
This script helps you set up Google Calendar OAuth 2.0 integration.
"""

import os
import secrets
import base64
import sys
from pathlib import Path

def generate_encryption_key():
    """Generate a secure encryption key for token storage"""
    return base64.urlsafe_b64encode(secrets.token_bytes(32)).decode()

def check_environment():
    """Check if the environment is properly set up"""
    print("🔍 Checking environment setup...")
    
    # Check if .env.local exists
    env_file = Path('.env.local')
    if not env_file.exists():
        print("❌ .env.local file not found")
        return False
    
    # Check if required packages are installed
    try:
        import google.auth
        import google.oauth2.credentials
        import googleapiclient.discovery
        import cryptography
        print("✅ Required packages are installed")
    except ImportError as e:
        print(f"❌ Missing required package: {e}")
        print("Run: pip install -r requirements.txt")
        return False
    
    return True

def read_env_file():
    """Read the current .env.local file"""
    env_vars = {}
    try:
        with open('.env.local', 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    env_vars[key] = value
    except FileNotFoundError:
        pass
    return env_vars

def write_env_file(env_vars):
    """Write environment variables to .env.local"""
    with open('.env.local', 'w') as f:
        f.write("# TailorTalk Local Environment Configuration\n")
        f.write("# Generated by setup_oauth.py\n\n")
        
        f.write("# Gemini AI API Key - Get from: https://makersuite.google.com/app/apikey\n")
        f.write(f"GEMINI_API_KEY={env_vars.get('GEMINI_API_KEY', 'your_gemini_api_key_here')}\n\n")
        
        f.write("# Google OAuth Credentials - Get from: https://console.cloud.google.com/apis/credentials\n")
        f.write("# Follow the setup guide in GOOGLE_OAUTH_SETUP.md for detailed instructions\n")
        f.write(f"GOOGLE_CLIENT_ID={env_vars.get('GOOGLE_CLIENT_ID', 'your_google_client_id_here')}\n")
        f.write(f"GOOGLE_CLIENT_SECRET={env_vars.get('GOOGLE_CLIENT_SECRET', 'your_google_client_secret_here')}\n\n")
        
        f.write("# OAuth Configuration\n")
        f.write(f"OAUTH_REDIRECT_URI={env_vars.get('OAUTH_REDIRECT_URI', 'http://localhost:8501')}\n")
        f.write(f"OAUTH_SCOPES={env_vars.get('OAUTH_SCOPES', 'https://www.googleapis.com/auth/calendar.readonly,https://www.googleapis.com/auth/calendar.events,https://www.googleapis.com/auth/userinfo.email,https://www.googleapis.com/auth/userinfo.profile')}\n\n")
        
        f.write("# Security Configuration\n")
        f.write("# Generate a secure random key for token encryption (32 bytes base64 encoded)\n")
        f.write(f"ENCRYPTION_KEY={env_vars.get('ENCRYPTION_KEY', generate_encryption_key())}\n\n")
        
        f.write("# Application Configuration\n")
        f.write(f"APP_ENV={env_vars.get('APP_ENV', 'development')}\n")
        f.write(f"DEBUG_MODE={env_vars.get('DEBUG_MODE', 'true')}\n")

def setup_oauth():
    """Interactive OAuth setup"""
    print("🚀 TailorTalk Google OAuth Setup")
    print("=" * 50)
    
    if not check_environment():
        print("\n❌ Environment check failed. Please fix the issues above and try again.")
        return False
    
    # Read existing environment variables
    env_vars = read_env_file()
    
    print("\n📝 OAuth Configuration Setup")
    print("Please provide your Google OAuth credentials.")
    print("If you haven't created them yet, follow the guide in GOOGLE_OAUTH_SETUP.md\n")
    
    # Get Google Client ID
    current_client_id = env_vars.get('GOOGLE_CLIENT_ID', '')
    if current_client_id and current_client_id != 'your_google_client_id_here':
        print(f"Current Client ID: {current_client_id[:20]}...")
        use_current = input("Use current Client ID? (y/n): ").lower().strip()
        if use_current != 'y':
            client_id = input("Enter your Google Client ID: ").strip()
            env_vars['GOOGLE_CLIENT_ID'] = client_id
    else:
        client_id = input("Enter your Google Client ID: ").strip()
        env_vars['GOOGLE_CLIENT_ID'] = client_id
    
    # Get Google Client Secret
    current_client_secret = env_vars.get('GOOGLE_CLIENT_SECRET', '')
    if current_client_secret and current_client_secret not in ['PLACEHOLDER_CLIENT_SECRET', 'your_google_client_secret_here']:
        print("Current Client Secret: [HIDDEN]")
        use_current = input("Use current Client Secret? (y/n): ").lower().strip()
        if use_current != 'y':
            client_secret = input("Enter your Google Client Secret: ").strip()
            env_vars['GOOGLE_CLIENT_SECRET'] = client_secret
    else:
        client_secret = input("Enter your Google Client Secret: ").strip()
        env_vars['GOOGLE_CLIENT_SECRET'] = client_secret
    
    # Set redirect URI
    current_redirect = env_vars.get('OAUTH_REDIRECT_URI', 'http://localhost:8501')
    print(f"\nCurrent redirect URI: {current_redirect}")
    new_redirect = input("Enter redirect URI (press Enter to keep current): ").strip()
    if new_redirect:
        env_vars['OAUTH_REDIRECT_URI'] = new_redirect
    
    # Generate encryption key if not present
    if not env_vars.get('ENCRYPTION_KEY') or env_vars.get('ENCRYPTION_KEY') == 'your_encryption_key_here':
        env_vars['ENCRYPTION_KEY'] = generate_encryption_key()
        print("✅ Generated new encryption key for secure token storage")
    
    # Write the configuration
    write_env_file(env_vars)
    print("\n✅ Configuration saved to .env.local")
    
    # Test the configuration
    print("\n🧪 Testing OAuth configuration...")
    try:
        from backend.oauth_handler import GoogleOAuthHandler
        oauth_handler = GoogleOAuthHandler()
        
        if oauth_handler.is_configured():
            print("✅ OAuth configuration is valid")
            config_status = oauth_handler.get_configuration_status()
            print(f"✅ Client ID configured: {config_status['client_id_configured']}")
            print(f"✅ Client Secret configured: {config_status['client_secret_configured']}")
            print(f"✅ Redirect URI: {config_status['redirect_uri']}")
            return True
        else:
            print("❌ OAuth configuration is invalid")
            return False
    except Exception as e:
        print(f"❌ Error testing configuration: {e}")
        return False

def main():
    """Main setup function"""
    if len(sys.argv) > 1 and sys.argv[1] == '--check':
        # Just check the environment
        if check_environment():
            print("✅ Environment is properly set up")
            sys.exit(0)
        else:
            print("❌ Environment setup issues found")
            sys.exit(1)
    
    # Run interactive setup
    if setup_oauth():
        print("\n🎉 OAuth setup completed successfully!")
        print("\nNext steps:")
        print("1. Start your application: streamlit run streamlit_app.py")
        print("2. Navigate to the Google Calendar section")
        print("3. Click 'Connect Google Calendar' to test the integration")
        print("\nFor troubleshooting, see GOOGLE_OAUTH_SETUP.md")
    else:
        print("\n❌ OAuth setup failed. Please check the errors above and try again.")
        sys.exit(1)

if __name__ == "__main__":
    main()
